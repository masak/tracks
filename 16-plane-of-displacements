use Track;

my $body = "";

sub t($coord) { 300 + 150 * $coord }
sub fuzz { .3 * (rand - .5) }

sub vertical-line($x, :$width) {
    my $y = sqrt(1.8 * 1.8 - $x * $x);
    $body ~= qq:to"LINE";
        <line x1="{t $x}" y1="{t -$y + fuzz}" x2="{t $x}" y2="{t $y + fuzz}" style="stroke: black; stroke-width: {$width}" />
        LINE
}

sub horizontal-line($y, :$width) {
    my $x = sqrt(1.8 * 1.8 - $y * $y);
    $body ~= qq:to"LINE";
        <line x1="{t -$x + fuzz}" y1="{t $y}" x2="{t $x + fuzz}" y2="{t $y}" style="stroke: black; stroke-width: {$width}" />
        LINE
}

sub point($x, $y, $n) {
    my $fill = do given $n {
        when 1 { "#fa2" }
        when 2 { "#cc2" }
        when 3 { "#af2" }
        when 4 { "#7f7" }
        when 5 { "#2fa" }
        when 6 { "#2cc" }
        when 7 { "#2af" }
        when 8 { "#77f" }
        when 9 { "#a2f" }
        when 10 { "#c2c" }
        when 11 { "#f2a" }
        when 12 { "#f77" }
        when 13 { "#fa2" }
    };
    $body ~= qq:to"SVG";
        <circle cx="{t $x}" cy="{t $y}" r="3" style="fill: {$fill}; stroke: black; stroke-width: 0.5" />
        SVG
    if $n > 1 {
        $body ~= qq:to"SVG";
            <g transform="translate({t $x}, {t $y}) rotate(-45) translate(3, 0)">
              <path d="M 0 0 L 5 5 L 15 5 L 15 -5 L 5 -5 z" style="fill: {$fill}; stroke: black; stroke-width: 0.5" />
              <text x="8" y="3" style="font-size: 7.5; text-anchor: middle">{$n}</text>
            </g>
            SVG
    }
}

vertical-line(0, :width(2));
horizontal-line(0, :width(2));
vertical-line(1, :width(1.5));
horizontal-line(1, :width(1.5));
vertical-line(-1, :width(1.5));
horizontal-line(-1, :width(1.5));

constant δ = 1 / sqrt(2);

for δ, 2*δ,
    1+δ, 1-δ, 1-2*δ, 1-3*δ,
    2-δ, 2-2*δ, 2-3*δ, 2-4*δ, 2-5*δ,
    3-3*δ, 3-4*δ, 3-5*δ,
    4-4*δ, 4-5*δ, 4-6*δ,
    5-5*δ, 6-6*δ {

    vertical-line($_, :width(0.5));
    vertical-line(-$_, :width(0.5));
    horizontal-line($_, :width(0.5));
    horizontal-line(-$_, :width(0.5));
}

point(|$_) for
    [0, 0, 10],
    [3 - 4 * δ, -3 + 4 * δ, 3],
    [3 - 4 * δ, 3 - 4 * δ, 1],
    [-1 + δ, -2 + 3 * δ, 2],
    [-2 + 3 * δ, -1 + δ, 3],
    [-2 + 3 * δ, 1 - δ, 1],
    [1 - δ, -2 + 3 * δ, 2],
    [1 - δ, 2 - 3 * δ, 2],
    [2 - 3 * δ, 1 - δ, 2],
    [1 - δ, -4 + 5 * δ, 2],
    [1 - δ, 4 - 5 * δ, 2],
    [2 - 3 * δ, 3 - 5 * δ, 1],
    [3 - 5 * δ, 2 - 3 * δ, 4],
    [4 - 5 * δ, 1 - δ, 1],
    [-2 + 2 * δ, 0, 3],
    [0, -2 + 2 * δ, 2],
    [0, 2 - 2 * δ, 2],
    [2 - 2 * δ, 0, 8],
    [2 - 2 * δ, -4 + 6 * δ, 1],
    [2 - 2 * δ, 4 - 6 * δ, 2],
    [4 - 6 * δ, -2 + 2 * δ, 1],
    [4 - 6 * δ, 2 - 2 * δ, 3],
    [3 - 5 * δ, -4 + 5 * δ, 1],
    [3 - 5 * δ, 4 - 5 * δ, 1],
    [4 - 5 * δ, -3 + 5 * δ, 1],
    [-δ, 1 - δ, 3],
    [1 - δ, -δ, 7],
    [1 - δ, δ, 8],
    [δ, 1 - δ, 2],
    [-2 + 4 * δ, 0, 6],
    [0, -2 + 4 * δ, 5],
    [0, 2 - 4 * δ, 5],
    [2 - 4 * δ, 0, 12],
    [2 - 4 * δ, 4 - 6 * δ, 1],
    [4 - 6 * δ, 2 - 4 * δ, 2],
    [-3 + 5 * δ, -δ, 1],
    [-δ, -3 + 5 * δ, 2],
    [2 - 3 * δ, -3 + 3 * δ, 1],
    [3 - 3 * δ, -2 + 3 * δ, 2],
    [3 - 5 * δ, -δ, 4],
    [3 - 5 * δ, δ, 4],
    [δ, 3 - 5 * δ, 1],
    [3 - 3 * δ, -4 + 5 * δ, 1],
    [3 - 3 * δ, 4 - 5 * δ, 1],
    [4 - 5 * δ, -3 + 3 * δ, 2],
    [-1, -3 + 4 * δ, 2],
    [-3 + 4 * δ, -1, 2],
    [1, -3 + 4 * δ, 3],
    [1, 3 - 4 * δ, 3],
    [3 - 4 * δ, -1, 2],
    [3 - 4 * δ, 1, 4],
    [-1 + 3 * δ, -2 + 3 * δ, 1],
    [-1 + 3 * δ, 2 - 3 * δ, 1],
    [-2 + 3 * δ, -1 + 3 * δ, 1],
    [-3 + 3 * δ, -δ, 2],
    [-δ, -3 + 3 * δ, 2],
    [3 - 3 * δ, -δ, 2],
    [3 - 3 * δ, δ, 2],
    [δ, -3 + 3 * δ, 1],
    [-2 + 4 * δ, -2 + 4 * δ, 2],
    [-2 + 4 * δ, 2 - 4 * δ, 1],
    [-4 + 4 * δ, 0, 1],
    [0, -4 + 4 * δ, 4],
    [0, 4 - 4 * δ, 3],
    [2 - 4 * δ, 2 - 4 * δ, 4],
    [4 - 4 * δ, 0, 6],
    [1 - 3 * δ, 4 - 5 * δ, 3],
    [4 - 5 * δ, 1 - 3 * δ, 4],
    [2 - 2 * δ, -4 + 4 * δ, 3],
    [2 - 2 * δ, 4 - 4 * δ, 2],
    [4 - 4 * δ, -2 + 2 * δ, 2],
    [4 - 4 * δ, 2 - 2 * δ, 1],
    [-1 + 3 * δ, -δ, 2],
    [-1 + 3 * δ, δ, 2],
    [-1 + δ, 2 - δ, 4],
    [-δ, -1 + 3 * δ, 1],
    [-δ, 1 - 3 * δ, 3],
    [1 - 3 * δ, -δ, 6],
    [1 - δ, -2 + δ, 2],
    [1 - δ, 2 - δ, 4],
    [2 - δ, -1 + δ, 8],
    [2 - δ, 1 - δ, 4],
    [δ, -1 + 3 * δ, 2],
    [2 - δ, -3 + 5 * δ, 1],
    [2 - δ, 3 - 5 * δ, 1],
    [3 - 5 * δ, -2 + δ, 2],
    [-1, 1, 5],
    [1, -1, 9],
    [1, 1, 8],
    [2 - 4 * δ, -4 + 4 * δ, 5],
    [2 - 4 * δ, 4 - 4 * δ, 6],
    [4 - 4 * δ, -2 + 4 * δ, 4],
    [4 - 4 * δ, 2 - 4 * δ, 7],
    [2 - 3 * δ, 5 - 5 * δ, 1],
    [5 - 5 * δ, -2 + 3 * δ, 2],
    [5 - 5 * δ, 2 - 3 * δ, 2],
    [-2 * δ, -2 + 2 * δ, 2],
    [-2 * δ, 2 - 2 * δ, 5],
    [-2 + 2 * δ, -2 * δ, 3],
    [-2 + 2 * δ, 2 * δ, 1],
    [2 * δ, -2 + 2 * δ, 3],
    [2 * δ, 2 - 2 * δ, 4],
    [2 - 2 * δ, -2 * δ, 8],
    [2 - 2 * δ, 2 * δ, 9],
    [-1 + δ, 2 - 5 * δ, 2],
    [-2 + 5 * δ, 1 - δ, 2],
    [1 - δ, -2 + 5 * δ, 2],
    [1 - δ, 2 - 5 * δ, 2],
    [2 - 5 * δ, -1 + δ, 4],
    [2 - δ, -3 + 3 * δ, 2],
    [2 - δ, 3 - 3 * δ, 2],
    [3 - 3 * δ, 2 - δ, 2],
    [2 - 5 * δ, 3 - 5 * δ, 1],
    [3 - 5 * δ, 2 - 5 * δ, 2],
    [5 - 5 * δ, -δ, 1],
    [-2 * δ, -2 + 4 * δ, 1],
    [-2 * δ, 2 - 4 * δ, 3],
    [-2 + 4 * δ, -2 * δ, 2],
    [-2 + 4 * δ, 2 * δ, 1],
    [2 * δ, -2 + 4 * δ, 2],
    [2 * δ, 2 - 4 * δ, 3],
    [2 - 4 * δ, -2 * δ, 4],
    [4 - 4 * δ, -4 + 4 * δ, 3],
    [4 - 4 * δ, 4 - 4 * δ, 1],
    [-1 + 3 * δ, -2 + δ, 1],
    [-1 + 3 * δ, 2 - δ, 1],
    [-1 - δ, -2 + 3 * δ, 2],
    [-1 - δ, 2 - 3 * δ, 2],
    [-2 + 3 * δ, -1 - δ, 4],
    [1 + δ, -2 + 3 * δ, 1],
    [1 + δ, 2 - 3 * δ, 1],
    [2 - 3 * δ, -1 - δ, 2],
    [2 - δ, -1 + 3 * δ, 2],
    [6 - 6 * δ, 0, 1],
;

print qq:to 'SVG';
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>

    <svg
       xmlns="http://www.w3.org/2000/svg"
       version="1.1"
       width="600"
       height="600">

      {$body}
    </svg>
    SVG
